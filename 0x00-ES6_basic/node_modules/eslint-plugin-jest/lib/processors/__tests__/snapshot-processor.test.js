"use strict";

var snapshotProcessor = _interopRequireWildcard(require("../snapshot-processor"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
describe('snapshot-processor', () => {
  it('exports an object with preprocess and postprocess functions', () => {
    expect(snapshotProcessor).toMatchObject({
      preprocess: expect.any(Function),
      postprocess: expect.any(Function)
    });
  });
  describe('preprocess function', () => {
    it('should pass on untouched source code to source array', () => {
      const {
        preprocess
      } = snapshotProcessor;
      const sourceCode = "const name = 'johnny bravo';";
      const result = preprocess(sourceCode);
      expect(result).toEqual([sourceCode]);
    });
  });
  describe('postprocess function', () => {
    it('should only return messages about snapshot specific rules', () => {
      const {
        postprocess
      } = snapshotProcessor;
      const result = postprocess([['no-console', 'global-require', 'jest/no-large-snapshots'].map(ruleId => ({
        ruleId
      }))]);
      expect(result).toEqual([{
        ruleId: 'jest/no-large-snapshots'
      }]);
    });
  });
});