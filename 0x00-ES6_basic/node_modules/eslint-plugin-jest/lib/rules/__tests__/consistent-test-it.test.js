"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _consistentTestIt = _interopRequireDefault(require("../consistent-test-it"));
var _utils2 = require("../utils");
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('consistent-test-it with fn=test', _consistentTestIt.default, {
  valid: [{
    code: 'test("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'test.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'test.skip("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'test.concurrent("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'xtest("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'test.each([])("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'test.each``("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }, {
    code: 'describe("suite", () => { test("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test
    }]
  }],
  invalid: [{
    code: 'it("foo")',
    output: 'test("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: (0, _dedent.default)`
        import { it } from '@jest/globals';

        it("foo")
      `,
    output: (0, _dedent.default)`
        import { it } from '@jest/globals';

        test("foo")
      `,
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: (0, _dedent.default)`
        import { it as testThisThing } from '@jest/globals';

        testThisThing("foo")
      `,
    output: (0, _dedent.default)`
        import { it as testThisThing } from '@jest/globals';

        test("foo")
      `,
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'xit("foo")',
    output: 'xtest("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'fit("foo")',
    output: 'test.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'it.skip("foo")',
    output: 'test.skip("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'it.concurrent("foo")',
    output: 'test.concurrent("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'it.only("foo")',
    output: 'test.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'it.each([])("foo")',
    output: 'test.each([])("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'it.each``("foo")',
    output: 'test.each``("foo")',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe.each``("foo", () => { it.each``("bar") })',
    output: 'describe.each``("foo", () => { test.each``("bar") })',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe.each``("foo", () => { test.each``("bar") })',
    output: 'describe.each``("foo", () => { it.each``("bar") })',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: (0, _dedent.default)`
        describe.each()("%s", () => {
          test("is valid, but should not be", () => {});

          it("is not valid, but should be", () => {});
        });
      `,
    output: (0, _dedent.default)`
        describe.each()("%s", () => {
          it("is valid, but should not be", () => {});

          it("is not valid, but should be", () => {});
        });
      `,
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: (0, _dedent.default)`
        describe.only.each()("%s", () => {
          test("is valid, but should not be", () => {});

          it("is not valid, but should be", () => {});
        });
      `,
    output: (0, _dedent.default)`
        describe.only.each()("%s", () => {
          it("is valid, but should not be", () => {});

          it("is not valid, but should be", () => {});
        });
      `,
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe("suite", () => { it("foo") })',
    output: 'describe("suite", () => { test("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with fn=it', _consistentTestIt.default, {
  valid: [{
    code: 'it("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'fit("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'xit("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'it.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'it.skip("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'it.concurrent("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'it.each([])("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'it.each``("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }, {
    code: 'describe("suite", () => { it("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it
    }]
  }],
  invalid: [{
    code: 'test("foo")',
    output: 'it("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'xtest("foo")',
    output: 'xit("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'test.skip("foo")',
    output: 'it.skip("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'test.concurrent("foo")',
    output: 'it.concurrent("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'test.only("foo")',
    output: 'it.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'test.each([])("foo")',
    output: 'it.each([])("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe.each``("foo", () => { test.each``("bar") })',
    output: 'describe.each``("foo", () => { it.each``("bar") })',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'test.each``("foo")',
    output: 'it.each``("foo")',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe("suite", () => { test("foo") })',
    output: 'describe("suite", () => { it("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with fn=test and withinDescribe=it ', _consistentTestIt.default, {
  valid: [{
    code: 'test("foo")',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: 'test.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: 'test.skip("foo")',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: 'test.concurrent("foo")',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: 'xtest("foo")',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: '[1,2,3].forEach(() => { test("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }],
  invalid: [{
    code: 'describe("suite", () => { test("foo") })',
    output: 'describe("suite", () => { it("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe("suite", () => { test.only("foo") })',
    output: 'describe("suite", () => { it.only("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe("suite", () => { xtest("foo") })',
    output: 'describe("suite", () => { xit("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: (0, _dedent.default)`
        import { xtest as dontTestThis } from '@jest/globals';

        describe("suite", () => { dontTestThis("foo") });
      `,
    output: (0, _dedent.default)`
        import { xtest as dontTestThis } from '@jest/globals';

        describe("suite", () => { xit("foo") });
      `,
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: (0, _dedent.default)`
        import { describe as context, xtest as dontTestThis } from '@jest/globals';

        context("suite", () => { dontTestThis("foo") });
      `,
    output: (0, _dedent.default)`
        import { describe as context, xtest as dontTestThis } from '@jest/globals';

        context("suite", () => { xit("foo") });
      `,
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe("suite", () => { test.skip("foo") })',
    output: 'describe("suite", () => { it.skip("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'describe("suite", () => { test.concurrent("foo") })',
    output: 'describe("suite", () => { it.concurrent("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with fn=it and withinDescribe=test ', _consistentTestIt.default, {
  valid: [{
    code: 'it("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: 'it.only("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: 'it.skip("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: 'it.concurrent("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: 'xit("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: '[1,2,3].forEach(() => { it("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }],
  invalid: [{
    code: 'describe("suite", () => { it("foo") })',
    output: 'describe("suite", () => { test("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe("suite", () => { it.only("foo") })',
    output: 'describe("suite", () => { test.only("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe("suite", () => { xit("foo") })',
    output: 'describe("suite", () => { xtest("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe("suite", () => { it.skip("foo") })',
    output: 'describe("suite", () => { test.skip("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe("suite", () => { it.concurrent("foo") })',
    output: 'describe("suite", () => { test.concurrent("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with fn=test and withinDescribe=test ', _consistentTestIt.default, {
  valid: [{
    code: 'describe("suite", () => { test("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: 'test("foo");',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.test
    }]
  }],
  invalid: [{
    code: 'describe("suite", () => { it("foo") })',
    output: 'describe("suite", () => { test("foo") })',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'it("foo")',
    output: 'test("foo")',
    options: [{
      fn: _utils2.TestCaseName.test,
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with fn=it and withinDescribe=it ', _consistentTestIt.default, {
  valid: [{
    code: 'describe("suite", () => { it("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: 'it("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.it
    }]
  }],
  invalid: [{
    code: 'describe("suite", () => { test("foo") })',
    output: 'describe("suite", () => { it("foo") })',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }, {
    code: 'test("foo")',
    output: 'it("foo")',
    options: [{
      fn: _utils2.TestCaseName.it,
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }]
});
ruleTester.run('consistent-test-it defaults without config object', _consistentTestIt.default, {
  valid: [{
    code: 'test("foo")'
  }],
  invalid: [{
    code: 'describe("suite", () => { test("foo") })',
    output: 'describe("suite", () => { it("foo") })',
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with withinDescribe=it', _consistentTestIt.default, {
  valid: [{
    code: 'test("foo")',
    options: [{
      withinDescribe: _utils2.TestCaseName.it
    }]
  }, {
    code: 'describe("suite", () => { it("foo") })',
    options: [{
      withinDescribe: _utils2.TestCaseName.it
    }]
  }],
  invalid: [{
    code: 'it("foo")',
    output: 'test("foo")',
    options: [{
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe("suite", () => { test("foo") })',
    output: 'describe("suite", () => { it("foo") })',
    options: [{
      withinDescribe: _utils2.TestCaseName.it
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.it,
        oppositeTestKeyword: _utils2.TestCaseName.test
      }
    }]
  }]
});
ruleTester.run('consistent-test-it with withinDescribe=test', _consistentTestIt.default, {
  valid: [{
    code: 'test("foo")',
    options: [{
      withinDescribe: _utils2.TestCaseName.test
    }]
  }, {
    code: 'describe("suite", () => { test("foo") })',
    options: [{
      withinDescribe: _utils2.TestCaseName.test
    }]
  }],
  invalid: [{
    code: 'it("foo")',
    output: 'test("foo")',
    options: [{
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethod',
      data: {
        testKeyword: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }, {
    code: 'describe("suite", () => { it("foo") })',
    output: 'describe("suite", () => { test("foo") })',
    options: [{
      withinDescribe: _utils2.TestCaseName.test
    }],
    errors: [{
      messageId: 'consistentMethodWithinDescribe',
      data: {
        testKeywordWithinDescribe: _utils2.TestCaseName.test,
        oppositeTestKeyword: _utils2.TestCaseName.it
      }
    }]
  }]
});