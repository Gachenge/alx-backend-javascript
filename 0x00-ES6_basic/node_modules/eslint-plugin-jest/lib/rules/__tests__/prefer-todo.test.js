"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _preferTodo = _interopRequireDefault(require("../prefer-todo"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('prefer-todo', _preferTodo.default, {
  valid: ['test()', 'test.concurrent()', 'test.todo("i need to write this test");', 'test(obj)', 'test.concurrent(obj)', 'fit("foo")', 'fit.concurrent("foo")', 'xit("foo")', 'test("foo", 1)', 'test("stub", () => expect(1).toBe(1));', 'test.concurrent("stub", () => expect(1).toBe(1));', (0, _dedent.default)`
      supportsDone && params.length < test.length
        ? done => test(...params, done)
        : () => test(...params);
    `],
  invalid: [{
    code: `test("i need to write this test");`,
    output: 'test.todo("i need to write this test");',
    errors: [{
      messageId: 'unimplementedTest'
    }]
  }, {
    code: `test("i need to write this test",);`,
    output: 'test.todo("i need to write this test",);',
    parserOptions: {
      ecmaVersion: 2017
    },
    errors: [{
      messageId: 'unimplementedTest'
    }]
  }, {
    code: 'test(`i need to write this test`);',
    output: 'test.todo(`i need to write this test`);',
    errors: [{
      messageId: 'unimplementedTest'
    }]
  }, {
    code: 'it("foo", function () {})',
    output: 'it.todo("foo")',
    errors: [{
      messageId: 'emptyTest'
    }]
  }, {
    code: 'it("foo", () => {})',
    output: 'it.todo("foo")',
    errors: [{
      messageId: 'emptyTest'
    }]
  }, {
    code: `test.skip("i need to write this test", () => {});`,
    output: 'test.todo("i need to write this test");',
    errors: [{
      messageId: 'emptyTest'
    }]
  }, {
    code: `test.skip("i need to write this test", function() {});`,
    output: 'test.todo("i need to write this test");',
    errors: [{
      messageId: 'emptyTest'
    }]
  }, {
    code: `test["skip"]("i need to write this test", function() {});`,
    output: 'test[\'todo\']("i need to write this test");',
    errors: [{
      messageId: 'emptyTest'
    }]
  }, {
    code: `test[\`skip\`]("i need to write this test", function() {});`,
    output: 'test[\'todo\']("i need to write this test");',
    errors: [{
      messageId: 'emptyTest'
    }]
  }]
});