"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _noIf = _interopRequireDefault(require("../no-if"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('conditional expressions', _noIf.default, {
  valid: ['const x = y ? 1 : 0', (0, _dedent.default)`
      it('foo', () => {
        const foo = function (bar) {
          return foo ? bar : null;
        };
      });
    `, (0, _dedent.default)`
      it('foo', function () {
        const foo = function (bar) {
          return foo ? bar : null;
        };
      });
    `, (0, _dedent.default)`
      it.each()('foo', function () {
        const foo = function (bar) {
          return foo ? bar : null;
        };
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        it('foo', () => {
          expect(bar ? foo : baz).toBe(boo);
        })
      `,
    errors: [{
      data: {
        condition: 'conditional'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it('foo', () => {
          const foo = bar ? foo : baz;
        })
      `,
    errors: [{
      data: {
        condition: 'conditional'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it('foo', () => {
          const foo = bar ? foo : baz;
        })
        const foo = bar ? foo : baz;
      `,
    errors: [{
      data: {
        condition: 'conditional'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it('foo', () => {
          const foo = bar ? foo : baz;
          const anotherFoo = anotherBar ? anotherFoo : anotherBaz;
        })
      `,
    errors: [{
      data: {
        condition: 'conditional'
      },
      messageId: 'conditionalInTest'
    }, {
      data: {
        condition: 'conditional'
      },
      messageId: 'conditionalInTest'
    }]
  }]
});
ruleTester.run('switch statements', _noIf.default, {
  valid: [(0, _dedent.default)`
      switch (true) {
        case true: {}
      }
    `, `it('foo', () => {})`, (0, _dedent.default)`
      it('foo', () => {});
      function myTest() {
        switch ('bar') {
        }
      }
    `, (0, _dedent.default)`
      foo('bar', () => {
        switch(baz) {}
      })
    `, (0, _dedent.default)`
      describe('foo', () => {
        switch('bar') {}
      })
    `, (0, _dedent.default)`
      describe.skip('foo', () => {
        switch('bar') {}
      })
    `, (0, _dedent.default)`
      describe.skip.each()('foo', () => {
        switch('bar') {}
      })
    `, (0, _dedent.default)`
      xdescribe('foo', () => {
        switch('bar') {}
      })
    `, (0, _dedent.default)`
      fdescribe('foo', () => {
        switch('bar') {}
      })
    `, (0, _dedent.default)`
      describe('foo', () => {
        switch('bar') {}
      })
      switch('bar') {}
    `, (0, _dedent.default)`
      describe('foo', () => {
        afterEach(() => {
          switch('bar') {}
        });
      });
    `, (0, _dedent.default)`
      it('valid', () => {
        const values = something.map(thing => {
          switch (thing.isFoo) {
            case true:
              return thing.foo;
            default:
              return thing.bar;
          }
        });

        expect(values).toStrictEqual(['foo']);
      });
    `, (0, _dedent.default)`
      describe('valid', () => {
        it('still valid', () => {
          const values = something.map(thing => {
            switch (thing.isFoo) {
              case true:
                return thing.foo;
              default:
                return thing.bar;
            }
          });

          expect(values).toStrictEqual(['foo']);
        });
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        it('foo', () => {
          switch (true) {
            case true: {}
          }
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.skip('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.only('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        xit('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        fit('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        fit.concurrent('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        test('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        test.skip('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        test.only('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        xtest('foo', () => {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        xtest('foo', function () {
          switch('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          it('bar', () => {
        
            switch('bar') {}
          })
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: "it('foo', myTest); function myTest() { switch ('bar') {} }",
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          it('bar', () => {
            switch('bar') {}
          })
          it('baz', () => {
            switch('qux') {}
            switch('quux') {}
          })
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }, {
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }, {
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it('foo', () => {
          callExpression()
          switch ('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        describe('valid', () => {
          describe('still valid', () => {
            it('really still valid', () => {
              const values = something.map((thing) => {
                switch (thing.isFoo) {
                  case true:
                    return thing.foo;
                  default:
                    return thing.bar;
                }
              });
  
              switch('invalid') {
                case true:
                  expect(values).toStrictEqual(['foo']);
              }
            });
          });
        });
      `,
    errors: [{
      data: {
        condition: 'switch'
      },
      messageId: 'conditionalInTest'
    }]
  }]
});
ruleTester.run('if statements', _noIf.default, {
  valid: ['if(foo) {}', "it('foo', () => {})", 'it("foo", function () {})', "it('foo', () => {}); function myTest() { if('bar') {} }", (0, _dedent.default)`
      foo('bar', () => {
        if(baz) {}
      })
    `, (0, _dedent.default)`
      describe('foo', () => {
        if('bar') {}
      })
    `, (0, _dedent.default)`
      describe.skip('foo', () => {
        if('bar') {}
      })
    `, (0, _dedent.default)`
      xdescribe('foo', () => {
        if('bar') {}
      })
    `, (0, _dedent.default)`
      fdescribe('foo', () => {
        if('bar') {}
      })
    `, (0, _dedent.default)`
      describe('foo', () => {
        if('bar') {}
      })
      if('baz') {}
    `, (0, _dedent.default)`
      describe('foo', () => {
        afterEach(() => {
          if('bar') {}
        });
      })
    `, (0, _dedent.default)`
      describe.each\`\`('foo', () => {
        afterEach(() => {
          if('bar') {}
        });
      })
    `, (0, _dedent.default)`
      describe('foo', () => {
        beforeEach(() => {
          if('bar') {}
        });
      })
    `, 'const foo = bar ? foo : baz;', (0, _dedent.default)`
      it('valid', () => {
        const values = something.map((thing) => {
          if (thing.isFoo) {
            return thing.foo
          } else {
            return thing.bar;
          }
        });

        expect(values).toStrictEqual(['foo']);
      });
    `, (0, _dedent.default)`
      describe('valid', () => {
        it('still valid', () => {
          const values = something.map((thing) => {
            if (thing.isFoo) {
              return thing.foo
            } else {
              return thing.bar;
            }
          });

          expect(values).toStrictEqual(['foo']);
        });
      });
    `, (0, _dedent.default)`
      describe('valid', () => {
        describe('still valid', () => {
          it('really still valid', () => {
            const values = something.map((thing) => {
              if (thing.isFoo) {
                return thing.foo
              } else {
                return thing.bar;
              }
            });

            expect(values).toStrictEqual(['foo']);
          });
        });
      });
    `, (0, _dedent.default)`
      it('foo', () => {
        const foo = function(bar) {
          if (bar) {
            return 1;
          } else {
            return 2;
          }
        };
      });
    `, (0, _dedent.default)`
      it('foo', () => {
        function foo(bar) {
          if (bar) {
            return 1;
          } else {
            return 2;
          }
        };
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        it('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.skip('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.skip('foo', function () {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.only('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        xit('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        fit('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        fit.concurrent('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        test('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        test.skip('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        test.only('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        xtest('foo', () => {
          if('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          it('bar', () => {
            if('bar') {}
          })
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: "it('foo', myTest); function myTest() { if ('bar') {} }",
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          it('bar', () => {
            if('bar') {}
          })
          it('baz', () => {
            if('qux') {}
            if('quux') {}
          })
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }, {
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }, {
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it('foo', () => {
          callExpression()
          if ('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.each\`\`('foo', () => {
          callExpression()
          if ('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.each()('foo', () => {
          callExpression()
          if ('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.only.each\`\`('foo', () => {
          callExpression()
          if ('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        it.only.each()('foo', () => {
          callExpression()
          if ('bar') {}
        })
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }, {
    code: (0, _dedent.default)`
        describe('valid', () => {
          describe('still valid', () => {
            it('really still valid', () => {
              const values = something.map((thing) => {
                if (thing.isFoo) {
                  return thing.foo
                } else {
                  return thing.bar;
                }
              });
  
              if('invalid') {
                expect(values).toStrictEqual(['foo']);
              }
            });
          });
        });
      `,
    errors: [{
      data: {
        condition: 'if'
      },
      messageId: 'conditionalInTest'
    }]
  }]
});