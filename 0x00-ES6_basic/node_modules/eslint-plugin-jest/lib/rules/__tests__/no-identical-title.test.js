"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _noIdenticalTitle = _interopRequireDefault(require("../no-identical-title"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('no-identical-title', _noIdenticalTitle.default, {
  valid: ['it(); it();', 'describe(); describe();', 'describe("foo", () => {}); it("foo", () => {});', (0, _dedent.default)`
      describe("foo", () => {
        it("works", () => {});
      });
    `, (0, _dedent.default)`
      it('one', () => {});
      it('two', () => {});
    `, (0, _dedent.default)`
      describe('foo', () => {});
      describe('foe', () => {});
    `, (0, _dedent.default)`
      it(\`one\`, () => {});
      it(\`two\`, () => {});
    `, (0, _dedent.default)`
      describe(\`foo\`, () => {});
      describe(\`foe\`, () => {});
    `, (0, _dedent.default)`
      describe('foo', () => {
        test('this', () => {});
        test('that', () => {});
      });
    `, (0, _dedent.default)`
      test.concurrent('this', () => {});
      test.concurrent('that', () => {});
    `, (0, _dedent.default)`
      test.concurrent('this', () => {});
      test.only.concurrent('that', () => {});
    `, (0, _dedent.default)`
      test.only.concurrent('this', () => {});
      test.concurrent('that', () => {});
    `, (0, _dedent.default)`
      test.only.concurrent('this', () => {});
      test.only.concurrent('that', () => {});
    `, (0, _dedent.default)`
      test.only('this', () => {});
      test.only('that', () => {});
    `, (0, _dedent.default)`
      describe('foo', () => {
        it('works', () => {});

        describe('foe', () => {
          it('works', () => {});
        });
      });
    `, (0, _dedent.default)`
      describe('foo', () => {
        describe('foe', () => {
          it('works', () => {});
        });

        it('works', () => {});
      });
    `, "describe('foo', () => describe('foe', () => {}));", (0, _dedent.default)`
      describe('foo', () => {
        describe('foe', () => {});
      });

      describe('foe', () => {});
    `, 'test("number" + n, function() {});', 'test("number" + n, function() {}); test("number" + n, function() {});', 'it(`${n}`, function() {});', 'it(`${n}`, function() {}); it(`${n}`, function() {});', (0, _dedent.default)`
      describe('a class named ' + myClass.name, () => {
        describe('#myMethod', () => {});
      });

      describe('something else', () => {});
    `, (0, _dedent.default)`
      describe('my class', () => {
        describe('#myMethod', () => {});
        describe('a class named ' + myClass.name, () => {});
      });
    `, (0, _dedent.default)`
      describe("foo", () => {
        it(\`ignores $\{someVar} with the same title\`, () => {});
        it(\`ignores $\{someVar} with the same title\`, () => {});
      });
    `.replace(/\\\{/u, '{'), (0, _dedent.default)`
      const test = { content: () => "foo" };
      test.content(\`something that is not from jest\`, () => {});
      test.content(\`something that is not from jest\`, () => {});
    `, (0, _dedent.default)`
      const describe = { content: () => "foo" };
      describe.content(\`something that is not from jest\`, () => {});
      describe.content(\`something that is not from jest\`, () => {});
    `, (0, _dedent.default)`
      describe.each\`
        description
        $\{'b'}
      \`('$description', () => {});

      describe.each\`
        description
        $\{'a'}
      \`('$description', () => {});
    `, (0, _dedent.default)`
      describe('top level', () => {
        describe.each\`\`('nested each', () => {
          describe.each\`\`('nested nested each', () => {});
        });

        describe('nested', () => {});
      });
    `, (0, _dedent.default)`
      describe.each\`\`('my title', value => {});
      describe.each\`\`('my title', value => {});
      describe.each([])('my title', value => {});
      describe.each([])('my title', value => {});
    `, (0, _dedent.default)`
      describe.each([])('when the value is %s', value => {});
      describe.each([])('when the value is %s', value => {});
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe('foo', () => {
          it('works', () => {});
          it('works', () => {});
        });
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 6,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
        it('works', () => {});
        it('works', () => {});
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 4,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        test.only('this', () => {});
        test('this', () => {});
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 6,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        xtest('this', () => {});
        test('this', () => {});
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 6,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        test.only('this', () => {});
        test.only('this', () => {});
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 11,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        test.concurrent('this', () => {});
        test.concurrent('this', () => {});
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 17,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        test.only('this', () => {});
        test.concurrent('this', () => {});
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 17,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {});
        describe('foo', () => {});
      `,
    errors: [{
      messageId: 'multipleDescribeTitle',
      column: 10,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {});
        xdescribe('foo', () => {});
      `,
    errors: [{
      messageId: 'multipleDescribeTitle',
      column: 11,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        fdescribe('foo', () => {});
        describe('foo', () => {});
      `,
    errors: [{
      messageId: 'multipleDescribeTitle',
      column: 10,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          describe('foe', () => {});
        });
        describe('foo', () => {});
      `,
    errors: [{
      messageId: 'multipleDescribeTitle',
      column: 10,
      line: 4
    }]
  }, {
    code: (0, _dedent.default)`
        describe("foo", () => {
          it(\`catches backticks with the same title\`, () => {});
          it(\`catches backticks with the same title\`, () => {});
        });
      `,
    errors: [{
      messageId: 'multipleTestTitle',
      column: 6,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
        context('foo', () => {
          describe('foe', () => {});
        });
        describe('foo', () => {});
      `,
    errors: [{
      messageId: 'multipleDescribeTitle',
      column: 10,
      line: 4
    }],
    settings: {
      jest: {
        globalAliases: {
          describe: ['context']
        }
      }
    }
  }]
});