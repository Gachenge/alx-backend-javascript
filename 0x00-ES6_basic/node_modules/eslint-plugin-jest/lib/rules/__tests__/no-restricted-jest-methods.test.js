"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _noRestrictedJestMethods = _interopRequireDefault(require("../no-restricted-jest-methods"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2017
  }
});
ruleTester.run('no-restricted-jest-methods', _noRestrictedJestMethods.default, {
  valid: ['jest', 'jest()', 'jest.mock()', 'expect(a).rejects;', 'expect(a);', {
    code: (0, _dedent.default)`
        import { jest } from '@jest/globals';

        jest;
      `,
    parserOptions: {
      sourceType: 'module'
    }
  }],
  invalid: [{
    code: 'jest.fn()',
    options: [{
      fn: null
    }],
    errors: [{
      messageId: 'restrictedJestMethod',
      data: {
        message: null,
        restriction: 'fn'
      },
      column: 6,
      line: 1
    }]
  }, {
    code: 'jest["fn"]()',
    options: [{
      fn: null
    }],
    errors: [{
      messageId: 'restrictedJestMethod',
      data: {
        message: null,
        restriction: 'fn'
      },
      column: 6,
      line: 1
    }]
  }, {
    code: 'jest.mock()',
    options: [{
      mock: 'Do not use mocks'
    }],
    errors: [{
      messageId: 'restrictedJestMethodWithMessage',
      data: {
        message: 'Do not use mocks',
        restriction: 'mock'
      },
      column: 6,
      line: 1
    }]
  }, {
    code: 'jest["mock"]()',
    options: [{
      mock: 'Do not use mocks'
    }],
    errors: [{
      messageId: 'restrictedJestMethodWithMessage',
      data: {
        message: 'Do not use mocks',
        restriction: 'mock'
      },
      column: 6,
      line: 1
    }]
  }, {
    code: (0, _dedent.default)`
        import { jest } from '@jest/globals';

        jest.advanceTimersByTime();
      `,
    options: [{
      advanceTimersByTime: null
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'restrictedJestMethod',
      data: {
        message: null,
        restriction: 'advanceTimersByTime'
      },
      column: 6,
      line: 3
    }]
  }]
});