"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _requireTopLevelDescribe = _interopRequireDefault(require("../require-top-level-describe"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('require-top-level-describe', _requireTopLevelDescribe.default, {
  valid: ['it.each()', 'describe("test suite", () => { test("my test") });', 'describe("test suite", () => { it("my test") });', (0, _dedent.default)`
      describe("test suite", () => {
        beforeEach("a", () => {});
        describe("b", () => {});
        test("c", () => {})
      });
    `, 'describe("test suite", () => { beforeAll("my beforeAll") });', 'describe("test suite", () => { afterEach("my afterEach") });', 'describe("test suite", () => { afterAll("my afterAll") });', (0, _dedent.default)`
      describe("test suite", () => {
        it("my test", () => {})
        describe("another test suite", () => {
        });
        test("my other test", () => {})
      });
    `, 'foo()', 'describe.each([1, true])("trues", value => { it("an it", () => expect(value).toBe(true) ); });', (0, _dedent.default)`
      describe('%s', () => {
        it('is fine', () => {
          //
        });
      });

      describe.each('world')('%s', () => {
        it.each([1, 2, 3])('%n', () => {
          //
        });
      });
    `, (0, _dedent.default)`
      describe.each('hello')('%s', () => {
        it('is fine', () => {
          //
        });
      });

      describe.each('world')('%s', () => {
        it.each([1, 2, 3])('%n', () => {
          //
        });
      });
    `, {
    code: (0, _dedent.default)`
        import { jest } from '@jest/globals';

        jest.doMock('my-module');
      `,
    parserOptions: {
      sourceType: 'module'
    }
  }, 'jest.doMock("my-module")'],
  invalid: [{
    code: 'beforeEach("my test", () => {})',
    errors: [{
      messageId: 'unexpectedHook'
    }]
  }, {
    code: (0, _dedent.default)`
        test("my test", () => {})
        describe("test suite", () => {});
      `,
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }, {
    code: (0, _dedent.default)`
        test("my test", () => {})
        describe("test suite", () => {
          it("test", () => {})
        });
      `,
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }, {
    code: (0, _dedent.default)`
        describe("test suite", () => {});
        afterAll("my test", () => {})
      `,
    errors: [{
      messageId: 'unexpectedHook'
    }]
  }, {
    code: (0, _dedent.default)`
        import { describe, afterAll as onceEverythingIsDone } from '@jest/globals';

        describe("test suite", () => {});
        onceEverythingIsDone("my test", () => {})
      `,
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'unexpectedHook'
    }]
  }, {
    code: "it.skip('test', () => {});",
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }, {
    code: "it.each([1, 2, 3])('%n', () => {});",
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }, {
    code: "it.skip.each([1, 2, 3])('%n', () => {});",
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }, {
    code: "it.skip.each``('%n', () => {});",
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }, {
    code: "it.each``('%n', () => {});",
    errors: [{
      messageId: 'unexpectedTestCase'
    }]
  }]
});
ruleTester.run('require-top-level-describe (enforce number of describes)', _requireTopLevelDescribe.default, {
  valid: ['describe("test suite", () => { test("my test") });', 'foo()', 'describe.each([1, true])("trues", value => { it("an it", () => expect(value).toBe(true) ); });', (0, _dedent.default)`
        describe('one', () => {});
        describe('two', () => {});
        describe('three', () => {});
      `, {
    code: (0, _dedent.default)`
          describe('one', () => {
            describe('two', () => {});
            describe('three', () => {});
          });
        `,
    options: [{
      maxNumberOfTopLevelDescribes: 1
    }]
  }],
  invalid: [{
    code: (0, _dedent.default)`
          describe('one', () => {});
          describe('two', () => {});
          describe('three', () => {});
        `,
    options: [{
      maxNumberOfTopLevelDescribes: 2
    }],
    errors: [{
      messageId: 'tooManyDescribes',
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
          describe('one', () => {
            describe('one (nested)', () => {});
            describe('two (nested)', () => {});
          });
          describe('two', () => {
            describe('one (nested)', () => {});
            describe('two (nested)', () => {});
            describe('three (nested)', () => {});
          });
          describe('three', () => {
            describe('one (nested)', () => {});
            describe('two (nested)', () => {});
            describe('three (nested)', () => {});
          });
        `,
    options: [{
      maxNumberOfTopLevelDescribes: 2
    }],
    errors: [{
      messageId: 'tooManyDescribes',
      line: 10
    }]
  }, {
    code: (0, _dedent.default)`
          import {
            describe as describe1,
            describe as describe2,
            describe as describe3,
          } from '@jest/globals';

          describe1('one', () => {
            describe('one (nested)', () => {});
            describe('two (nested)', () => {});
          });
          describe2('two', () => {
            describe('one (nested)', () => {});
            describe('two (nested)', () => {});
            describe('three (nested)', () => {});
          });
          describe3('three', () => {
            describe('one (nested)', () => {});
            describe('two (nested)', () => {});
            describe('three (nested)', () => {});
          });
        `,
    options: [{
      maxNumberOfTopLevelDescribes: 2
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'tooManyDescribes',
      line: 16
    }]
  }, {
    code: (0, _dedent.default)`
          describe('one', () => {});
          describe('two', () => {});
          describe('three', () => {});
        `,
    options: [{
      maxNumberOfTopLevelDescribes: 1
    }],
    errors: [{
      messageId: 'tooManyDescribes',
      line: 2
    }, {
      messageId: 'tooManyDescribes',
      line: 3
    }]
  }]
});