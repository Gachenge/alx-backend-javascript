"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _noDuplicateHooks = _interopRequireDefault(require("../no-duplicate-hooks"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('basic describe block', _noDuplicateHooks.default, {
  valid: [(0, _dedent.default)`
      describe("foo", () => {
        beforeEach(() => {})
        test("bar", () => {
          someFn();
        })
      })
    `, (0, _dedent.default)`
      beforeEach(() => {})
      test("bar", () => {
        someFn();
      })
    `, (0, _dedent.default)`
      describe("foo", () => {
        beforeAll(() => {}),
        beforeEach(() => {})
        afterEach(() => {})
        afterAll(() => {})

        test("bar", () => {
          someFn();
        })
      })
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe("foo", () => {
          beforeEach(() => {}),
          beforeEach(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 3,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
        describe.skip("foo", () => {
          beforeEach(() => {}),
          beforeAll(() => {}),
          beforeAll(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeAll'
      },
      column: 3,
      line: 4
    }]
  }, {
    code: (0, _dedent.default)`
        describe.skip("foo", () => {
          afterEach(() => {}),
          afterEach(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'afterEach'
      },
      column: 3,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
        import { afterEach } from '@jest/globals';

        describe.skip("foo", () => {
          afterEach(() => {}),
          afterEach(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'afterEach'
      },
      column: 3,
      line: 5
    }]
  }, {
    code: (0, _dedent.default)`
        import { afterEach, afterEach as somethingElse } from '@jest/globals';

        describe.skip("foo", () => {
          afterEach(() => {}),
          somethingElse(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'afterEach'
      },
      column: 3,
      line: 5
    }]
  }, {
    code: (0, _dedent.default)`
        describe.skip("foo", () => {
          afterAll(() => {}),
          afterAll(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'afterAll'
      },
      column: 3,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
        afterAll(() => {}),
        afterAll(() => {}),
        test("bar", () => {
          someFn();
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'afterAll'
      },
      column: 1,
      line: 2
    }]
  }, {
    code: (0, _dedent.default)`
        describe("foo", () => {
          beforeEach(() => {}),
          beforeEach(() => {}),
          beforeEach(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 3,
      line: 3
    }, {
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 3,
      line: 4
    }]
  }, {
    code: (0, _dedent.default)`
        describe.skip("foo", () => {
          afterAll(() => {}),
          afterAll(() => {}),
          beforeAll(() => {}),
          beforeAll(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'afterAll'
      },
      column: 3,
      line: 3
    }, {
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeAll'
      },
      column: 3,
      line: 5
    }]
  }]
});
ruleTester.run('multiple describe blocks', _noDuplicateHooks.default, {
  valid: [(0, _dedent.default)`
      describe.skip("foo", () => {
        beforeEach(() => {}),
        beforeAll(() => {}),
        test("bar", () => {
          someFn();
        })
      })
      describe("foo", () => {
        beforeEach(() => {}),
        beforeAll(() => {}),
        test("bar", () => {
          someFn();
        })
      })
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe.skip("foo", () => {
          beforeEach(() => {}),
          beforeAll(() => {}),
          test("bar", () => {
            someFn();
          })
        })
        describe("foo", () => {
          beforeEach(() => {}),
          beforeEach(() => {}),
          beforeAll(() => {}),
          test("bar", () => {
            someFn();
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 3,
      line: 10
    }]
  }]
});
ruleTester.run('nested describe blocks', _noDuplicateHooks.default, {
  valid: [(0, _dedent.default)`
      describe("foo", () => {
        beforeEach(() => {}),
        test("bar", () => {
          someFn();
        })
        describe("inner_foo", () => {
          beforeEach(() => {})
          test("inner bar", () => {
            someFn();
          })
        })
      })
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe("foo", () => {
          beforeAll(() => {}),
          test("bar", () => {
            someFn();
          })
          describe("inner_foo", () => {
            beforeEach(() => {})
            beforeEach(() => {})
            test("inner bar", () => {
              someFn();
            })
          })
        })
      `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 5,
      line: 8
    }]
  }]
});
ruleTester.run('describe.each blocks', _noDuplicateHooks.default, {
  valid: [(0, _dedent.default)`
      describe.each(['hello'])('%s', () => {
        beforeEach(() => {});

        it('is fine', () => {});
      });
    `, (0, _dedent.default)`
      describe('something', () => {
        describe.each(['hello'])('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });

        describe.each(['world'])('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });
      });
    `, (0, _dedent.default)`
      describe.each\`\`('%s', () => {
        beforeEach(() => {});

        it('is fine', () => {});
      });
    `, (0, _dedent.default)`
      describe('something', () => {
        describe.each\`\`('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });

        describe.each\`\`('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
      describe.each(['hello'])('%s', () => {
        beforeEach(() => {});
        beforeEach(() => {});

        it('is not fine', () => {});
      });
    `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 3,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
      describe('something', () => {
        describe.each(['hello'])('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });

        describe.each(['world'])('%s', () => {
          beforeEach(() => {});
          beforeEach(() => {});

          it('is not fine', () => {});
        });
      });
    `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 5,
      line: 10
    }]
  }, {
    code: (0, _dedent.default)`
      describe('something', () => {
        describe.each(['hello'])('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });

        describe.each(['world'])('%s', () => {
          describe('some more', () => {
            beforeEach(() => {});
            beforeEach(() => {});

            it('is not fine', () => {});
          });
        });
      });
    `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 7,
      line: 11
    }]
  }, {
    code: (0, _dedent.default)`
      describe.each\`\`('%s', () => {
        beforeEach(() => {});
        beforeEach(() => {});

        it('is fine', () => {});
      });
    `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 3,
      line: 3
    }]
  }, {
    code: (0, _dedent.default)`
      describe('something', () => {
        describe.each\`\`('%s', () => {
          beforeEach(() => {});

          it('is fine', () => {});
        });

        describe.each\`\`('%s', () => {
          beforeEach(() => {});
          beforeEach(() => {});

          it('is not fine', () => {});
        });
      });
    `,
    errors: [{
      messageId: 'noDuplicateHook',
      data: {
        hook: 'beforeEach'
      },
      column: 5,
      line: 10
    }]
  }]
});