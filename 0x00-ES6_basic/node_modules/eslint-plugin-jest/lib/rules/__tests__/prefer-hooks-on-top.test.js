"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _preferHooksOnTop = _interopRequireDefault(require("../prefer-hooks-on-top"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('basic describe block', _preferHooksOnTop.default, {
  valid: [(0, _dedent.default)`
      describe('foo', () => {
        beforeEach(() => {});
        someSetupFn();
        afterEach(() => {});

        test('bar', () => {
          someFn();
        });
      });
    `, (0, _dedent.default)`
      describe('foo', () => {
        someSetupFn();
        beforeEach(() => {});
        afterEach(() => {});

        test('bar', () => {
          someFn();
        });
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe('foo', () => {
          beforeEach(() => {});
          test('bar', () => {
            someFn();
          });

          beforeAll(() => {});
          test('bar', () => {
            someFn();
          });
        });
      `,
    errors: [{
      messageId: 'noHookOnTop',
      column: 3,
      line: 7
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          beforeEach(() => {});
          test.each\`\`('bar', () => {
            someFn();
          });

          beforeAll(() => {});
          test.only('bar', () => {
            someFn();
          });
        });
      `,
    errors: [{
      messageId: 'noHookOnTop',
      column: 3,
      line: 7
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          beforeEach(() => {});
          test.only.each\`\`('bar', () => {
            someFn();
          });

          beforeAll(() => {});
          test.only('bar', () => {
            someFn();
          });
        });
      `,
    errors: [{
      messageId: 'noHookOnTop',
      column: 3,
      line: 7
    }]
  }]
});
ruleTester.run('multiple describe blocks', _preferHooksOnTop.default, {
  valid: [(0, _dedent.default)`
      describe.skip('foo', () => {
        beforeEach(() => {});
        beforeAll(() => {});

        test('bar', () => {
          someFn();
        });
      });

      describe('foo', () => {
        beforeEach(() => {});

        test('bar', () => {
          someFn();
        });
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe.skip('foo', () => {
          beforeEach(() => {});
          test('bar', () => {
            someFn();
          });

          beforeAll(() => {});
          test('bar', () => {
            someFn();
          });
        });
        describe('foo', () => {
          beforeEach(() => {});
          beforeEach(() => {});
          beforeAll(() => {});

          test('bar', () => {
            someFn();
          });
        });

        describe('foo', () => {
          test('bar', () => {
            someFn();
          });

          beforeEach(() => {});
          beforeEach(() => {});
          beforeAll(() => {});
        });
      `,
    errors: [{
      messageId: 'noHookOnTop',
      column: 3,
      line: 7
    }, {
      messageId: 'noHookOnTop',
      column: 3,
      line: 27
    }, {
      messageId: 'noHookOnTop',
      column: 3,
      line: 28
    }, {
      messageId: 'noHookOnTop',
      column: 3,
      line: 29
    }]
  }]
});
ruleTester.run('nested describe blocks', _preferHooksOnTop.default, {
  valid: [(0, _dedent.default)`
      describe('foo', () => {
        beforeEach(() => {});
        test('bar', () => {
          someFn();
        });

        describe('inner_foo', () => {
          beforeEach(() => {});
          test('inner bar', () => {
            someFn();
          });
        });
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe('foo', () => {
          beforeAll(() => {});
          test('bar', () => {
            someFn();
          });

          describe('inner_foo', () => {
            beforeEach(() => {});
            test('inner bar', () => {
              someFn();
            });

            test('inner bar', () => {
              someFn();
            });

            beforeAll(() => {});
            afterAll(() => {});
            test('inner bar', () => {
              someFn();
            });
          });
        });
      `,
    errors: [{
      messageId: 'noHookOnTop',
      column: 5,
      line: 17
    }, {
      messageId: 'noHookOnTop',
      column: 5,
      line: 18
    }]
  }]
});