"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _noUntypedMockFactory = _interopRequireDefault(require("../no-untyped-mock-factory"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: require.resolve('@typescript-eslint/parser')
});
ruleTester.run('no-untyped-mock-factory', _noUntypedMockFactory.default, {
  valid: ["jest.mock('random-number');", (0, _dedent.default)`
      jest.mock<typeof import('../moduleName')>('../moduleName', () => {
        return jest.fn(() => 42);
      });
    `, (0, _dedent.default)`
      jest.mock<typeof import('./module')>('./module', () => ({
        ...jest.requireActual('./module'),
        foo: jest.fn()
      }));
    `, (0, _dedent.default)`
      jest.mock<typeof import('foo')>('bar', () => ({
        ...jest.requireActual('bar'),
        foo: jest.fn()
      }));
    `, (0, _dedent.default)`
      jest.doMock('./module', (): typeof import('./module') => ({
        ...jest.requireActual('./module'),
        foo: jest.fn()
      }));
    `, (0, _dedent.default)`
      jest.mock('../moduleName', function (): typeof import('../moduleName') {
        return jest.fn(() => 42);
      });
    `, (0, _dedent.default)`
      jest.mock<() => number>('random-num', () => {
        return jest.fn(() => 42);
      });
    `, (0, _dedent.default)`
      jest['doMock']<() => number>('random-num', () => {
        return jest.fn(() => 42);
      });
    `, (0, _dedent.default)`
      jest.mock<any>('random-num', () => {
        return jest.fn(() => 42);
      });
    `, (0, _dedent.default)`
      jest.mock(
        '../moduleName',
        () => {
          return jest.fn(() => 42)
        },
        {virtual: true},
      );
    `, (0, _dedent.default)`
      jest.mock('../moduleName', function (): (() => number) {
        return jest.fn(() => 42);
      });
    `,
  // Should not match
  (0, _dedent.default)`
      mockito<() => number>('foo', () => {
        return jest.fn(() => 42);
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        jest.mock('../moduleName', () => {
          return jest.fn(() => 42);
        });
      `,
    output: (0, _dedent.default)`
        jest.mock<typeof import('../moduleName')>('../moduleName', () => {
          return jest.fn(() => 42);
        });
      `,
    errors: [{
      messageId: 'addTypeParameterToModuleMock'
    }]
  }, {
    code: (0, _dedent.default)`
        jest.mock("./module", () => ({
          ...jest.requireActual('./module'),
          foo: jest.fn()
        }));
      `,
    output: (0, _dedent.default)`
        jest.mock<typeof import("./module")>("./module", () => ({
          ...jest.requireActual('./module'),
          foo: jest.fn()
        }));
      `,
    errors: [{
      messageId: 'addTypeParameterToModuleMock'
    }]
  }, {
    code: (0, _dedent.default)`
        jest.mock('random-num', () => {
          return jest.fn(() => 42);
        });
      `,
    output: (0, _dedent.default)`
        jest.mock<typeof import('random-num')>('random-num', () => {
          return jest.fn(() => 42);
        });
      `,
    errors: [{
      messageId: 'addTypeParameterToModuleMock'
    }]
  }, {
    code: (0, _dedent.default)`
        jest.doMock('random-num', () => {
          return jest.fn(() => 42);
        });
      `,
    output: (0, _dedent.default)`
        jest.doMock<typeof import('random-num')>('random-num', () => {
          return jest.fn(() => 42);
        });
      `,
    errors: [{
      messageId: 'addTypeParameterToModuleMock'
    }]
  }, {
    code: (0, _dedent.default)`
        jest['mock']('random-num', () => {
          return jest.fn(() => 42);
        });
      `,
    output: (0, _dedent.default)`
        jest['mock']<typeof import('random-num')>('random-num', () => {
          return jest.fn(() => 42);
        });
      `,
    errors: [{
      messageId: 'addTypeParameterToModuleMock'
    }]
  }, {
    code: (0, _dedent.default)`
        const moduleToMock = 'random-num';
        jest.mock(moduleToMock, () => {
          return jest.fn(() => 42);
        });
      `,
    output: null,
    errors: [{
      messageId: 'addTypeParameterToModuleMock'
    }]
  }]
});