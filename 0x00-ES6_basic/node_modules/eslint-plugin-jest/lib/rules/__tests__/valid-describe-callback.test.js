"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _validDescribeCallback = _interopRequireDefault(require("../valid-describe-callback"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2017
  }
});
ruleTester.run('valid-describe-callback', _validDescribeCallback.default, {
  valid: ['describe.each([1, 2, 3])("%s", (a, b) => {});', 'describe("foo", function() {})', 'describe("foo", () => {})', 'describe(`foo`, () => {})', 'xdescribe("foo", () => {})', 'fdescribe("foo", () => {})', 'describe.only("foo", () => {})', 'describe.skip("foo", () => {})', (0, _dedent.default)`
      describe('foo', () => {
        it('bar', () => {
          return Promise.resolve(42).then(value => {
            expect(value).toBe(42)
          })
        })
      })
    `, (0, _dedent.default)`
      describe('foo', () => {
        it('bar', async () => {
          expect(await Promise.resolve(42)).toBe(42)
        })
      })
    `, (0, _dedent.default)`
      if (hasOwnProperty(obj, key)) {
      }
    `, (0, _dedent.default)`
      describe.each\`
        foo  | foe
        ${1} | ${2}
      \`('$something', ({ foo, foe }) => {});
    `],
  invalid: [{
    code: 'describe.each()()',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 1
    }]
  }, {
    code: 'describe["each"]()()',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 1
    }]
  }, {
    code: 'describe.each(() => {})()',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 1
    }]
  }, {
    code: 'describe.each(() => {})("foo")',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 25
    }]
  }, {
    code: 'describe.each()(() => {})',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 17
    }]
  }, {
    code: 'describe["each"]()(() => {})',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 20
    }]
  }, {
    code: 'describe.each("foo")(() => {})',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 22
    }]
  }, {
    code: 'describe.only.each("foo")(() => {})',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 27
    }]
  }, {
    code: 'describe(() => {})',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 10
    }]
  }, {
    code: 'describe("foo")',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 10
    }]
  }, {
    code: 'describe("foo", "foo2")',
    errors: [{
      messageId: 'secondArgumentMustBeFunction',
      line: 1,
      column: 10
    }]
  }, {
    code: 'describe()',
    errors: [{
      messageId: 'nameAndCallback',
      line: 1,
      column: 1
    }]
  }, {
    code: 'describe("foo", async () => {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 17
    }]
  }, {
    code: 'describe("foo", async function () {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 17
    }]
  }, {
    code: 'xdescribe("foo", async function () {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 18
    }]
  }, {
    code: 'fdescribe("foo", async function () {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 18
    }]
  }, {
    code: (0, _dedent.default)`
        import { fdescribe } from '@jest/globals';

        fdescribe("foo", async function () {})
      `,
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 3,
      column: 18
    }]
  }, {
    code: 'describe.only("foo", async function () {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 22
    }]
  }, {
    code: 'describe.skip("foo", async function () {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 22
    }]
  }, {
    code: (0, _dedent.default)`
        describe('sample case', () => {
          it('works', () => {
            expect(true).toEqual(true);
          });
          describe('async', async () => {
            await new Promise(setImmediate);
            it('breaks', () => {
              throw new Error('Fail');
            });
          });
        });
      `,
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 5,
      column: 21
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', function () {
          return Promise.resolve().then(() => {
            it('breaks', () => {
              throw new Error('Fail')
            })
          })
        })
      `,
    errors: [{
      messageId: 'unexpectedReturnInDescribe',
      line: 2,
      column: 3
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          return Promise.resolve().then(() => {
            it('breaks', () => {
              throw new Error('Fail')
            })
          })
          describe('nested', () => {
            return Promise.resolve().then(() => {
              it('breaks', () => {
                throw new Error('Fail')
              })
            })
          })
        })
      `,
    errors: [{
      messageId: 'unexpectedReturnInDescribe',
      line: 2,
      column: 3
    }, {
      messageId: 'unexpectedReturnInDescribe',
      line: 8,
      column: 5
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', async () => {
          await something()
          it('does something')
          describe('nested', () => {
            return Promise.resolve().then(() => {
              it('breaks', () => {
                throw new Error('Fail')
              })
            })
          })
        })
      `,
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 17
    }, {
      messageId: 'unexpectedReturnInDescribe',
      line: 5,
      column: 5
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () =>
          test('bar', () => {})
        )
      `,
    errors: [{
      messageId: 'unexpectedReturnInDescribe',
      line: 1,
      column: 17
    }]
  }, {
    code: 'describe("foo", done => {})',
    errors: [{
      messageId: 'unexpectedDescribeArgument',
      line: 1,
      column: 17
    }]
  }, {
    code: 'describe("foo", function (done) {})',
    errors: [{
      messageId: 'unexpectedDescribeArgument',
      line: 1,
      column: 27
    }]
  }, {
    code: 'describe("foo", function (one, two, three) {})',
    errors: [{
      messageId: 'unexpectedDescribeArgument',
      line: 1,
      column: 27
    }]
  }, {
    code: 'describe("foo", async function (done) {})',
    errors: [{
      messageId: 'noAsyncDescribeCallback',
      line: 1,
      column: 17
    }, {
      messageId: 'unexpectedDescribeArgument',
      line: 1,
      column: 33
    }]
  }]
});