"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _preferExpectResolves = _interopRequireDefault(require("../prefer-expect-resolves"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2017
  }
});
ruleTester.run('prefer-expect-resolves', _preferExpectResolves.default, {
  valid: ['expect.hasAssertions()', (0, _dedent.default)`
      it('passes', async () => {
        await expect(someValue()).resolves.toBe(true);
      });
    `, (0, _dedent.default)`
      it('is true', async () => {
        const myPromise = Promise.resolve(true);

        await expect(myPromise).resolves.toBe(true);
      });
    `, (0, _dedent.default)`
      it('errors', async () => {
        await expect(Promise.reject(new Error('oh noes!'))).rejects.toThrowError(
          'oh noes!',
        );
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        it('passes', async () => {
          expect(await someValue(),).toBe(true);
        });
      `,
    output: (0, _dedent.default)`
        it('passes', async () => {
          await expect(someValue(),).resolves.toBe(true);
        });
      `,
    errors: [{
      endColumn: 27,
      column: 10,
      messageId: 'expectResolves'
    }]
  }, {
    code: (0, _dedent.default)`
        it('is true', async () => {
          const myPromise = Promise.resolve(true);

          expect(await myPromise).toBe(true);
        });
      `,
    output: (0, _dedent.default)`
        it('is true', async () => {
          const myPromise = Promise.resolve(true);

          await expect(myPromise).resolves.toBe(true);
        });
      `,
    errors: [{
      endColumn: 25,
      column: 10,
      messageId: 'expectResolves'
    }]
  }, {
    code: (0, _dedent.default)`
        import { expect as pleaseExpect } from '@jest/globals';

        it('is true', async () => {
          const myPromise = Promise.resolve(true);

          pleaseExpect(await myPromise).toBe(true);
        });
      `,
    output: (0, _dedent.default)`
        import { expect as pleaseExpect } from '@jest/globals';

        it('is true', async () => {
          const myPromise = Promise.resolve(true);

          await pleaseExpect(myPromise).resolves.toBe(true);
        });
      `,
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      endColumn: 31,
      column: 16,
      messageId: 'expectResolves'
    }]
  }]
});