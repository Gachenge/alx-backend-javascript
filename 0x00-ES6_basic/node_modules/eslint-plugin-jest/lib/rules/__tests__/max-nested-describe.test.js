"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _maxNestedDescribe = _interopRequireDefault(require("../max-nested-describe"));
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2017
  }
});
ruleTester.run('max-nested-describe', _maxNestedDescribe.default, {
  valid: [(0, _dedent.default)`
      describe('foo', function() {
        describe('bar', function () {
          describe('baz', function () {
            describe('qux', function () {
              describe('qux', function () {
                it('should get something', () => {
                  expect(getSomething()).toBe('Something');
                });
              })
            })
          })
        })
      });
    `, (0, _dedent.default)`
      describe('foo', function() {
        describe('bar', function () {
          describe('baz', function () {
            describe('qux', function () {
              describe('qux', function () {
                it('should get something', () => {
                  expect(getSomething()).toBe('Something');
                });
              });

              fdescribe('qux', () => {
                it('something', async () => {
                  expect('something').toBe('something');
                });
              });
            })
          })
        })
      });
    `, (0, _dedent.default)`
      describe('foo', () => {
        describe('bar', () => {
          it('hello', async () => {
            expect('hello').toBe('hello');
          });
        });
      });

      xdescribe('foo', function() {
        describe('bar', function() {
          it('something', async () => {
            expect('something').toBe('something');
          });
        });
      });
    `, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          describe.only('bar', () => {
            describe.skip('baz', () => {
              it('something', async () => {
                expect('something').toBe('something');
              });
            });
          });
        });
    `,
    options: [{
      max: 3
    }]
  }, {
    code: (0, _dedent.default)`
        it('something', async () => {
          expect('something').toBe('something');
        });
    `,
    options: [{
      max: 0
    }]
  }, (0, _dedent.default)`
      describe('foo', () => {
        describe.each(['hello', 'world'])("%s", (a) => {});
      });
    `, (0, _dedent.default)`
      describe('foo', () => {
        describe.each\`
        foo  | bar
        ${1} | ${2}
        \`('$foo $bar', ({ foo, bar }) => {});
      });
    `],
  invalid: [{
    code: (0, _dedent.default)`
        describe('foo', function() {
          describe('bar', function () {
            describe('baz', function () {
              describe('qux', function () {
                describe('quxx', function () {
                  describe('over limit', function () {
                    it('should get something', () => {
                      expect(getSomething()).toBe('Something');
                    });
                  });
                });
              });
            });
          });
        });
      `,
    errors: [{
      messageId: 'exceededMaxDepth',
      line: 6,
      column: 11
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          describe('bar', () => {
            describe('baz', () => {
              describe('baz1', () => {
                describe('baz2', () => {
                  describe('baz3', () => {
                    it('should get something', () => {
                      expect(getSomething()).toBe('Something');
                    });
                  });

                  describe('baz4', () => {
                    it('should get something', () => {
                      expect(getSomething()).toBe('Something');
                    });
                  });
                });
              });
            });

            describe('qux', function () {
              it('should get something', () => {
                expect(getSomething()).toBe('Something');
              });
            });
          })
        });
      `,
    errors: [{
      messageId: 'exceededMaxDepth',
      line: 6,
      column: 11
    }, {
      messageId: 'exceededMaxDepth',
      line: 12,
      column: 11
    }]
  }, {
    code: (0, _dedent.default)`
        fdescribe('foo', () => {
          describe.only('bar', () => {
            describe.skip('baz', () => {
              it('should get something', () => {
                expect(getSomething()).toBe('Something');
              });
            });

            describe('baz', () => {
              it('should get something', () => {
                expect(getSomething()).toBe('Something');
              });
            });
          });
        });

        xdescribe('qux', () => {
          it('should get something', () => {
            expect(getSomething()).toBe('Something');
          });
        });
      `,
    options: [{
      max: 2
    }],
    errors: [{
      messageId: 'exceededMaxDepth',
      line: 3,
      column: 5
    }, {
      messageId: 'exceededMaxDepth',
      line: 9,
      column: 5
    }]
  }, {
    code: (0, _dedent.default)`
        describe('qux', () => {
          it('should get something', () => {
            expect(getSomething()).toBe('Something');
          });
        });
      `,
    options: [{
      max: 0
    }],
    errors: [{
      messageId: 'exceededMaxDepth',
      line: 1,
      column: 1
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          describe.each(['hello', 'world'])("%s", (a) => {});
        });
      `,
    options: [{
      max: 1
    }],
    errors: [{
      messageId: 'exceededMaxDepth',
      line: 2,
      column: 3
    }]
  }, {
    code: (0, _dedent.default)`
        describe('foo', () => {
          describe.each\`
          foo  | bar
          ${1} | ${2}
          \`('$foo $bar', ({ foo, bar }) => {});
        });
      `,
    options: [{
      max: 1
    }],
    errors: [{
      messageId: 'exceededMaxDepth',
      line: 2,
      column: 3
    }]
  }]
});