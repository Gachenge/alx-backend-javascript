"use strict";

var _utils = require("@typescript-eslint/utils");
var _dedent = _interopRequireDefault(require("dedent"));
var _noHooks = _interopRequireDefault(require("../no-hooks"));
var _utils2 = require("../utils");
var _testUtils = require("./test-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ruleTester = new _utils.TSESLint.RuleTester({
  parser: _testUtils.espreeParser,
  parserOptions: {
    ecmaVersion: 2015
  }
});
ruleTester.run('no-hooks', _noHooks.default, {
  valid: ['test("foo")', 'describe("foo", () => { it("bar") })', 'test("foo", () => { expect(subject.beforeEach()).toBe(true) })', {
    code: 'afterEach(() => {}); afterAll(() => {});',
    options: [{
      allow: [_utils2.HookName.afterEach, _utils2.HookName.afterAll]
    }]
  }, {
    code: 'test("foo")',
    options: [{
      allow: undefined
    }]
  }],
  invalid: [{
    code: 'beforeAll(() => {})',
    errors: [{
      messageId: 'unexpectedHook',
      data: {
        hookName: _utils2.HookName.beforeAll
      }
    }]
  }, {
    code: 'beforeEach(() => {})',
    errors: [{
      messageId: 'unexpectedHook',
      data: {
        hookName: _utils2.HookName.beforeEach
      }
    }]
  }, {
    code: 'afterAll(() => {})',
    errors: [{
      messageId: 'unexpectedHook',
      data: {
        hookName: _utils2.HookName.afterAll
      }
    }]
  }, {
    code: 'afterEach(() => {})',
    errors: [{
      messageId: 'unexpectedHook',
      data: {
        hookName: _utils2.HookName.afterEach
      }
    }]
  }, {
    code: 'beforeEach(() => {}); afterEach(() => { jest.resetModules() });',
    options: [{
      allow: [_utils2.HookName.afterEach]
    }],
    errors: [{
      messageId: 'unexpectedHook',
      data: {
        hookName: _utils2.HookName.beforeEach
      }
    }]
  }, {
    code: (0, _dedent.default)`
        import { beforeEach as afterEach, afterEach as beforeEach } from '@jest/globals';

        afterEach(() => {});
        beforeEach(() => { jest.resetModules() });
      `,
    options: [{
      allow: [_utils2.HookName.afterEach]
    }],
    parserOptions: {
      sourceType: 'module'
    },
    errors: [{
      messageId: 'unexpectedHook',
      data: {
        hookName: _utils2.HookName.beforeEach
      }
    }]
  }]
});